Index: src/Model.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.*;\r\n\r\npublic class Model {\r\n    static HashMap<Double, Room> map;\r\n    static Player p1 = new Player(1,0, 4500,1,.5);\r\n    Monster monster = new Monster();\r\n    static Room currentRoom;\r\n    // [HOLLY] TreasureChestMap -> Maps treasure chests to a room\r\n    static HashMap<Double, TreasureChest> treasureChestMap = new HashMap<>();\r\n    static Puzzle puzzle = null;\r\n\r\n    public static void assignPuzzle(){\r\n        Random rand = new Random();\r\n        int number = rand.nextInt(Puzzle.puzzleList.size());\r\n        System.out.println(number);\r\n        puzzle = Puzzle.puzzleList.get(number);\r\n        Puzzle.puzzleList.remove(puzzle);\r\n    }\r\n\r\n    /*[NAJEE]*/public static StringBuilder getRoom(){\r\n        return currentRoom.getDesc();\r\n    }\r\n\r\n    /*[NAJEE]*/public static StringBuilder getDirectionList() throws FileNotFoundException {\r\n        double[] tmpArr = currentRoom.getDirections();\r\n        StringBuilder dirList = new StringBuilder();\r\n        for (int i = 0; i < 4; i++) {\r\n            if (tmpArr[i] == 0) {\r\n                dirList.append(\"Dead End\\n\");\r\n            } else {\r\n                dirList.append(map.get(tmpArr[i]).getRoomName());\r\n                dirList.append(\"\\n\");\r\n            }\r\n        }\r\n        return dirList;\r\n    }\r\n\r\n    public static boolean checkForMonster(){\r\n        boolean hasMonster = false;\r\n        for (Monster m : Monster.monsterList){\r\n            if (currentRoom.getRoomNumber() == m.getLocation()) {\r\n                hasMonster = true;\r\n                break;\r\n            }\r\n        }\r\n        return hasMonster;\r\n    }\r\n\r\n    /*[NAJEE]*/\r\n    public static boolean movePlayer(String direction) {\r\n        double[] directionOptions = currentRoom.getDirections();\r\n        boolean success = false;\r\n\r\n        switch (direction.toLowerCase()) {\r\n            case \"north\":\r\n                if (directionOptions[0] != (double) 0) {\r\n                    p1.setLastVisited(currentRoom.getRoomNumber());\r\n                    currentRoom = map.get(directionOptions[0]);\r\n                    success = true;\r\n                }\r\n                break;\r\n            case \"south\":\r\n                if (directionOptions[1] != (double) 0) {\r\n                    p1.setLastVisited(currentRoom.getRoomNumber());\r\n                    currentRoom = map.get(directionOptions[1]);\r\n                    success = true;\r\n                }\r\n                break;\r\n            case \"east\":\r\n                if (directionOptions[2] != (double) 0) {\r\n                    p1.setLastVisited(currentRoom.getRoomNumber());\r\n                    currentRoom = map.get(directionOptions[2]);\r\n                    success = true;\r\n                }\r\n                break;\r\n            case \"west\":\r\n                if (directionOptions[3] != (double) 0) {\r\n                    p1.setLastVisited(currentRoom.getRoomNumber());\r\n                    currentRoom = map.get(directionOptions[3]);\r\n                    success = true;\r\n                }\r\n                break;\r\n        }\r\n        return success;\r\n    }\r\n\r\n    /*[All]*/\r\n    public static void setup() throws FileNotFoundException {\r\n        String fileName;\r\n        File theFile;\r\n        Scanner inputFile;\r\n        HashMap<Double, Room> tmpMap = new HashMap<>();\r\n\r\n        //////Room setup [NAJEE]/////\r\n        fileName = \"room_data.txt\";\r\n        theFile = new File(fileName);\r\n        inputFile = new Scanner(theFile);\r\n        while (inputFile.hasNextLine()) {\r\n            String name = inputFile.nextLine();\r\n            double number = Double.parseDouble(inputFile.nextLine());\r\n            String desc = inputFile.nextLine();\r\n\r\n            Room tmpRoom = new Room(number, name, desc);\r\n            tmpMap.put(tmpRoom.getRoomNumber(), tmpRoom);\r\n        }\r\n        inputFile.close();\r\n\r\n        /////connection setup [NAJEE]/////\r\n        fileName = \"connection_data.txt\";\r\n        theFile = new File(fileName);\r\n        inputFile = new Scanner(theFile);\r\n        while (inputFile.hasNextLine()) {\r\n            double roomNumber = Double.parseDouble(inputFile.nextLine());\r\n            double forward = Double.parseDouble(inputFile.nextLine());\r\n            double backward = Double.parseDouble(inputFile.nextLine());\r\n            double right = Double.parseDouble(inputFile.nextLine());\r\n            double left = Double.parseDouble(inputFile.nextLine());\r\n\r\n            Room tmp2 = tmpMap.get(roomNumber);\r\n            double[] tmpArr = {forward, backward, right, left};\r\n            tmp2.setDirections(tmpArr);\r\n        }\r\n        inputFile.close();\r\n\r\n        ////monster setup [KELVIN]////\r\n        fileName = \"monster_data.txt\";\r\n        theFile = new File(fileName);\r\n        inputFile = new Scanner(theFile);\r\n        while (inputFile.hasNextLine()) {\r\n            String name = inputFile.nextLine();\r\n            double location = Double.parseDouble(inputFile.nextLine());\r\n            String description = inputFile.nextLine();\r\n            int health = Integer.parseInt(inputFile.nextLine());\r\n            int damage = Integer.parseInt(inputFile.nextLine());\r\n            String item=inputFile.nextLine();\r\n\r\n            Monster monster = new Monster(name, location, description, health, damage, item);\r\n            Monster.monsterList.add(monster);\r\n        }\r\n        inputFile.close();\r\n\r\n        // [HOLLY] -> Item File Reading\r\n        fileName = \"item_data.txt\";\r\n        theFile = new File(fileName);\r\n        inputFile = new Scanner(theFile);\r\n\r\n        while (inputFile.hasNextLine()) {\r\n            // Read item name, description, and room number\r\n            String itemName = inputFile.nextLine();\r\n            String itemDescription = inputFile.nextLine();\r\n            Double roomNumber = Double.parseDouble(inputFile.nextLine());\r\n            Room itemRoom = tmpMap.get(roomNumber);\r\n            // Create item\r\n            Item item = new Item(itemName, itemDescription);\r\n            // add Item to room\r\n            itemRoom.addItem(item);\r\n        }\r\n        inputFile.close();\r\n\r\n        // [HOLLY] -> Weapon [Item] File Reading\r\n        fileName = \"weapon_data.txt\";\r\n        theFile = new File(fileName);\r\n        inputFile = new Scanner(theFile);\r\n\r\n        while (inputFile.hasNextLine()) {\r\n            // Read item name, description, strength points and room number\r\n            String itemName = inputFile.nextLine();\r\n            String itemDescription = inputFile.nextLine();\r\n            int strengthPoints = Integer.parseInt(inputFile.nextLine());\r\n            Double roomNumber = Double.parseDouble(inputFile.nextLine());\r\n            Room itemRoom = tmpMap.get(roomNumber);\r\n            // Create item\r\n            Item item = new Weapon(itemName, itemDescription, strengthPoints);\r\n            // add Item to room\r\n            itemRoom.addItem(item);\r\n        }\r\n        inputFile.close();\r\n\r\n        // Omar Puzzle SetUp //\r\n        fileName = \"puzzle_data.txt\";\r\n        theFile = new File(fileName);\r\n        inputFile = new Scanner(theFile);\r\n\r\n        while(inputFile.hasNextLine()){\r\n            int PuzzleID = Integer.parseInt(inputFile.nextLine());\r\n            String PuzzleQues = inputFile.nextLine();\r\n            String PuzzleAns = inputFile.nextLine();\r\n            int Attempts = Integer.parseInt(inputFile.nextLine());\r\n            Puzzle PuzzleOBJ = new Puzzle(PuzzleID, PuzzleQues, PuzzleAns, Attempts);\r\n            Puzzle.puzzleList.add(PuzzleOBJ);\r\n        }\r\n        inputFile.close();\r\n\r\n        // [HOLLY] -> Treasure Chest File Reading\r\n        fileName = \"treasure_data.txt\";\r\n        theFile = new File(fileName);\r\n        inputFile = new Scanner(theFile);\r\n        while (inputFile.hasNextLine()) {\r\n            String treasureChestName = inputFile.nextLine();\r\n            LinkedList<Double> rooms = new LinkedList<Double>();\r\n\r\n            String roomsString = inputFile.nextLine();\r\n            if(roomsString.contains(\",\")){\r\n                String[] listOfRooms = roomsString.split(\",\");\r\n                for(String room : listOfRooms){\r\n                    rooms.add(Double.parseDouble(room));\r\n                }\r\n            }else{\r\n                rooms.add(Double.parseDouble(roomsString));\r\n            }\r\n\r\n            LinkedList<PowerUp> powerUps = new LinkedList<>();\r\n            String readLine = inputFile.nextLine();\r\n            while(!readLine.equals(\"----\")){\r\n                String itemName = readLine;\r\n                String type = itemName;\r\n                String itemDescription = inputFile.nextLine();\r\n                int points = Integer.parseInt(inputFile.nextLine());\r\n                PowerUp powerUp = new PowerUp(itemName,itemDescription,type,points);\r\n                powerUps.add(powerUp);\r\n                try{\r\n                    readLine = inputFile.nextLine();\r\n                }catch (NoSuchElementException e){\r\n                    // reached end of file\r\n                }\r\n            }\r\n            TreasureChest treasureChest = new TreasureChest(powerUps,treasureChestName);\r\n            for(Double roomNumber : rooms){\r\n                treasureChestMap.put(roomNumber, treasureChest);\r\n            }\r\n        }\r\n\r\n\r\n        map = tmpMap;\r\n        currentRoom = map.get(p1.getLocation());\r\n    }\r\n\r\n    // [HOLLY]  Check Player Inventory\r\n    public static void checkInventory() {\r\n        ConsoleView.showInventory(p1.getPlayerInventory());\r\n    }\r\n\r\n    //[HOLLY]  Pick up Item - >  Add item to inventory\r\n    public static void pickUpItem(String itemName) {\r\n        boolean inInventory = false;\r\n        for (Item item : currentRoom.getRoomInventory()) {\r\n            if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                inInventory = true;\r\n                p1.addToInventory(item);\r\n                // remove item from room\r\n                currentRoom.removeItem(item);\r\n                ConsoleView.successMessage(itemName + \" has been picked up\");\r\n            }\r\n        }\r\n        if(!inInventory){\r\n            ConsoleView.showErrorMessage(\"Item not in room\");\r\n        }\r\n    }\r\n\r\n    //[HOLLY] Drop Item -> drops item from inventory\r\n    public static void dropItem(String itemName) {\r\n        Item itemToRemove = null;\r\n        boolean inInventory = false;\r\n        for (Item item : p1.getPlayerInventory()) {\r\n            //if item in inventory + not equipped\r\n            if (item.getItemName().equalsIgnoreCase(itemName) && !p1.getEquippedItems().contains(itemName.toUpperCase())) {\r\n                inInventory = true;\r\n                itemToRemove = item;\r\n            }\r\n        }\r\n        if(inInventory) {\r\n            p1.removeFromInventory(itemToRemove);\r\n            // add item to room\r\n            currentRoom.addItem(itemToRemove);\r\n        }else{\r\n            ConsoleView.showErrorMessage(\"item not in inventory\");\r\n        }\r\n    }\r\n\r\n    //[HOLLY] Equip Item -> Equips an inventory item\r\n    public static void equipItem(String itemName) {\r\n        boolean equipped = p1.getEquippedItems().contains(itemName.toUpperCase());\r\n        if(!equipped){\r\n            for (Item item : p1.getPlayerInventory()) {\r\n                // if item in inventory -> equip\r\n                if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                    p1.addToEquipped(item.getItemName().toUpperCase());\r\n                    // if item is weapon, increase strength points\r\n                    boolean isWeapon = item instanceof Weapon;\r\n                    if (isWeapon) {\r\n                        p1.setStrength(p1.getStrength() + ((Weapon) item).strengthPoints);\r\n                        ConsoleView.successMessage(\"Player Strength has been increased \" + p1.getStrength());\r\n                    }\r\n                    ConsoleView.successMessage(itemName + \" has been equipped\\nEquipped Items: \" + p1.getEquippedItems().toString());\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            ConsoleView.showErrorMessage(\"Item already equipped\");\r\n        }\r\n    }\r\n\r\n    //[HOLLY] unequipItem -> Unequips an inventory item\r\n    public static void unequipItem(String itemName) {\r\n        boolean equipped = p1.getEquippedItems().contains(itemName.toUpperCase());\r\n        // if item is equipped\r\n        if(equipped){\r\n            for (Item item : p1.getPlayerInventory()) {\r\n                // if item in inventory\r\n                if (item.getItemName().equalsIgnoreCase(itemName)) {\r\n                    p1.removeFromEquipped(item.getItemName().toUpperCase());\r\n                    // if item is weapon, remove strength points\r\n                    boolean isWeapon = item instanceof Weapon;\r\n                    if (isWeapon) {\r\n                        p1.setStrength(p1.getStrength() - ((Weapon) item).strengthPoints);\r\n                        ConsoleView.successMessage(itemName + \" has been unequipped\\nEquipped Items:\"  + p1.getEquippedItems().toString()+ \"\\n[NOTE: Unequipping a weapon decreases the player's strength]\");\r\n                    }else{\r\n                        ConsoleView.successMessage(itemName + \" has been unequipped\\nEquipped Items:\" + p1.getEquippedItems().toString() );\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            ConsoleView.showErrorMessage(\"Item not equipped\");\r\n        }\r\n    }\r\n\r\n    // [HOLLY] -> Inspect Item -> Inspects item if it is inventory\r\n    public static void inspectItem(String itemName) {\r\n        if(p1.inventoryContains(itemName)){\r\n            ConsoleView.showItemDesc( p1.inventory.get(itemName).inspect());\r\n        }\r\n    }\r\n    // [HOLLY] chestCheck -> checks if current room has treasure chest\r\n    public static boolean chestCheck(){\r\n        return treasureChestMap.containsKey(Model.currentRoom.getRoomNumber());\r\n    }\r\n    // [HOLLY] -> opens treasure chest if it in the current room [NOTE: ADD CHECK MONSTER TO IF CONDITIONAL]\r\n    public static void openChest(){\r\n            ConsoleView.treasureMessage(treasureChestMap.get(currentRoom.getRoomNumber()).open());\r\n    }\r\n\r\n    // [HOLLY] -> activates chosen power up\r\n    public static void activatePowerup(String powerUp){\r\n        LinkedList<PowerUp> avaliblePowerups = treasureChestMap.get(currentRoom.getRoomNumber()).getPowerups();\r\n        for(PowerUp p : avaliblePowerups){\r\n            if(p.type.equalsIgnoreCase(powerUp)){\r\n                p.activate(p1);\r\n                ConsoleView.successMessage(p1.getStats());\r\n                treasureChestMap.remove(currentRoom.getRoomNumber());\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ////[KELVIN]////\r\n    public static String inspectMonster() {\r\n        String monsterDesc = \"\";\r\n        for (int i = 0; i < Monster.monsterList.size(); i++) {\r\n            if (currentRoom.getRoomNumber() == Monster.monsterList.get(i).getLocation()) {\r\n                 monsterDesc = Monster.monsterList.get(i).getName() + \"\\n\"\r\n                        + Monster.monsterList.get(i).getDescription();\r\n                 i=10;\r\n            } else {\r\n                monsterDesc= \"No monster in the room\";\r\n            }\r\n        }\r\n        return monsterDesc;\r\n    }\r\n\r\n    ////[KELVIN]////\r\n    public static void startCombat() {\r\n        Scanner combatChoice=new Scanner(System.in);\r\n        String combatChoiceString;\r\n        boolean hasMonster=true;\r\n        boolean inCombat=false;\r\n        int monsterToRemove = 0;\r\n        int monsterHP;\r\n        int playerHP=p1.getHealth();\r\n        double dodgeCompare;\r\n        for (int i = 0; i <Monster.monsterList.size();i++){\r\n            if (currentRoom.getRoomNumber() == Monster.monsterList.get(i).getLocation()) {\r\n                hasMonster=true;\r\n                String tempName = Monster.monsterList.get(i).getName();\r\n                ConsoleView.startCombatMessage(tempName);\r\n                combatChoiceString=combatChoice.nextLine();\r\n                if(combatChoiceString.toLowerCase().contains(\"yes\"))\r\n                {\r\n                    inCombat=true;\r\n                    combatChoiceString=\"\";\r\n                    while(inCombat) {\r\n                        while ((Monster.monsterList.get(i).getHealth() >= 0 || p1.getHealth()>=0) && inCombat) {\r\n                            ConsoleView.inCombatMessage();\r\n                            combatChoiceString=combatChoice.nextLine();\r\n                            if (combatChoiceString.toLowerCase().contains(\"attack\")) {\r\n                                monsterHP=Monster.monsterList.get(i).getHealth()-p1.getStrength();\r\n                                System.out.println(Monster.monsterList.get(i).getName() + \" hits you for \"+Monster.monsterList.get(i).getDamage()+\" HP\");\r\n                                playerHP=playerHP-Monster.monsterList.get(i).getDamage();\r\n                                p1.setHealth(playerHP);\r\n                                Monster.monsterList.get(i).setHealth(monsterHP);\r\n                                    if(monsterHP<=0){\r\n                                    monsterToRemove=i;\r\n                                    hasMonster=false;\r\n                                    inCombat=false;\r\n                                    }\r\n                            } else if (combatChoiceString.toLowerCase().contains(\"block\")) {\r\n                                playerHP=playerHP-(Monster.monsterList.get(i).getDamage()/2);\r\n                                p1.setHealth(playerHP);\r\n                                System.out.println(\"Reduced damage by half\");\r\n                            } else if (combatChoiceString.toLowerCase().contains(\"run\")) {\r\n                                inCombat=false;\r\n                                ConsoleView.playerEscapeCombat(Monster.monsterList.get(i).getName());\r\n                                currentRoom=map.get(p1.getLastVisited());\r\n                            } else if (combatChoiceString.toLowerCase().contains(\"dodge\")) {\r\n                                dodgeCompare=Math.random();\r\n                                if(dodgeCompare>p1.getSpeed()) {\r\n                                    System.out.println(\"Attack Avoided\");\r\n                                }\r\n                                else {\r\n                                    System.out.println(\"Dodge failed! Full Damage taken!\");\r\n                                    playerHP=playerHP-Monster.monsterList.get(i).getDamage();\r\n                                    p1.setHealth(playerHP);\r\n                                }\r\n                            } else {\r\n                                ConsoleView.invalidCombatOption();\r\n                            }\r\n                            if (p1.getHealth()==0){\r\n                                Model.gameOver(Monster.monsterList.get(i).getName());\r\n\r\n                            }\r\n                            if (!(Monster.monsterList.get(i).getHealth() <= 0)) {\r\n                                System.out.println(\"\\nMonster current health: \" + Monster.monsterList.get(i).getHealth());\r\n                                System.out.println(\"Your current health: \" + p1.getHealth());\r\n                            }\r\n                            else {\r\n                                p1.addKeyPieces(1);\r\n                                System.out.println(\"Yay you killed it.\");\r\n                                System.out.println(\"You've acquired 1/4 of the key.\\n\");\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                else{\r\n                    ConsoleView.monsterInRoomMessage();\r\n                }\r\n            }\r\n        }\r\n        if (!hasMonster){\r\n            Monster.monsterList.remove(monsterToRemove);\r\n            ConsoleView.noMonsterInRoomMessage();\r\n            String retryString=\"\";\r\n            Scanner retryChoice=new Scanner(System.in);\r\n\r\n            retryString=retryChoice.nextLine();\r\n\r\n            if (retryString.toLowerCase().contains(\"yes\")){\r\n                ConsoleView.gameRestartedFromCheckpoint();\r\n                currentRoom=map.get(p1.getLastVisited());\r\n                p1.setHealth(4500);\r\n            } else if (retryString.toLowerCase().contains(\"no\")) {\r\n                ConsoleView.thankYouForPlaying();\r\n            }\r\n        }\r\n    }\r\n\r\n    public static void gameOver( String monsterName){\r\n        ConsoleView.gameOverMessage(monsterName);\r\n    }\r\n\r\n    /*[NAJEE]*/\r\n    public static void quitGame() {\r\n        System.exit(0);\r\n    }\r\n\r\n    /* Omar Puzzle */\r\n    public static void solvePuzzle(){\r\n        int chances = 0;\r\n        Scanner scan = new Scanner(System.in);\r\n        String puzzleChoiceString=\"\";\r\n            System.out.println(\"Solve puzzle?\");\r\n        puzzleChoiceString = scan.nextLine();\r\n        if (puzzleChoiceString.toLowerCase().contains(\"yes\")) {\r\n            System.out.println(puzzle.getPuzzleQues());\r\n            while (chances != puzzle.getAttempts()) {\r\n                String answer = scan.nextLine();\r\n                if (puzzle.getPuzzleAns().equalsIgnoreCase(answer)) {\r\n                    System.out.println(\"The answer is correct.\");\r\n                    openChest();\r\n                    String chosenPowerUp = scan.nextLine();\r\n                    chosenPowerUp = chosenPowerUp.toLowerCase();\r\n                    activatePowerup(chosenPowerUp);\r\n                    break;\r\n                } else {\r\n                    System.out.println(\"The answer is incorrect, try again!\");\r\n                    chances += 1;\r\n                }\r\n            }\r\n            if (chances == puzzle.getAttempts()) {\r\n                System.out.println(\"You're out of attempts.\\n\");\r\n\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Model.java b/src/Model.java
--- a/src/Model.java	
+++ b/src/Model.java	
@@ -10,6 +10,8 @@
     // [HOLLY] TreasureChestMap -> Maps treasure chests to a room
     static HashMap<Double, TreasureChest> treasureChestMap = new HashMap<>();
     static Puzzle puzzle = null;
+    static final int TOTALROOMCOUNT = 31;
+    static int compass = 1;
 
     public static void assignPuzzle(){
         Random rand = new Random();
@@ -19,6 +21,10 @@
         Puzzle.puzzleList.remove(puzzle);
     }
 
+    public static int getCompassInfo(){
+        return TOTALROOMCOUNT - compass;
+    }
+
     /*[NAJEE]*/public static StringBuilder getRoom(){
         return currentRoom.getDesc();
     }
@@ -58,6 +64,7 @@
                 if (directionOptions[0] != (double) 0) {
                     p1.setLastVisited(currentRoom.getRoomNumber());
                     currentRoom = map.get(directionOptions[0]);
+                    currentRoom.setVisitedStatus();
                     success = true;
                 }
                 break;
@@ -65,6 +72,7 @@
                 if (directionOptions[1] != (double) 0) {
                     p1.setLastVisited(currentRoom.getRoomNumber());
                     currentRoom = map.get(directionOptions[1]);
+                    currentRoom.setVisitedStatus();
                     success = true;
                 }
                 break;
@@ -72,6 +80,7 @@
                 if (directionOptions[2] != (double) 0) {
                     p1.setLastVisited(currentRoom.getRoomNumber());
                     currentRoom = map.get(directionOptions[2]);
+                    currentRoom.setVisitedStatus();
                     success = true;
                 }
                 break;
@@ -79,6 +88,7 @@
                 if (directionOptions[3] != (double) 0) {
                     p1.setLastVisited(currentRoom.getRoomNumber());
                     currentRoom = map.get(directionOptions[3]);
+                    currentRoom.setVisitedStatus();
                     success = true;
                 }
                 break;
Index: src/ConsoleView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.LinkedList;\r\n\r\npublic class ConsoleView {\r\n    public static final String ANSI_PURPLE = \"\\033[0;35m\";\r\n    public static final String ANSI_RESET = \"\\u001B[0m\";\r\n    public static final String ANSI_RED = \"\\033[0;31m\";\r\n\r\n    public static void introMessage(){\r\n        System.out.println(\"Welcome to the Haunted Mansion game! Have fun!\\n\");\r\n    }\r\n\r\n    public static void navRequest (){\r\n        System.out.println(\"Which direction would you like to go or do you want to exit?\");\r\n    }\r\n    // [HOLLY] successMessage -> prints out success statements (i.e item succesffuly dropped/picked etc)\r\n    public static void successMessage(String message){System.out.println(ANSI_PURPLE + message + ANSI_RESET);}\r\n    // [HOLLY] showInventory -> prints out list of items in inventory\r\n    public static void showInventory (LinkedList<Item> inventory){\r\n        System.out.println(ANSI_PURPLE + \"Inventory: \"  + inventory.toString() + ANSI_RESET);\r\n    }\r\n    // [HOLLY] TreasureMessage -> prints out list of treasure chest items to choose from\r\n    public static void treasureMessage (LinkedList<PowerUp> powerUps){\r\n        System.out.println(ANSI_PURPLE +\"Choose a powerup:\" + ANSI_RESET);\r\n        for(PowerUp powerUp : powerUps){\r\n            System.out.println(ANSI_PURPLE + \"-\" + powerUp + ANSI_RESET);\r\n        }\r\n    }\r\n\r\n    // [HOLLY] showItemDescription -> prints out description\r\n    public static void showItemDesc (String itemDesc){System.out.println(ANSI_PURPLE + itemDesc + ANSI_RESET);}\r\n\r\n    // [HOLLY] showErrorMessage -> prints out description\r\n    public static void showErrorMessage (String errorMessage){System.out.println(ANSI_RED + errorMessage + ANSI_RESET);}\r\n\r\n    public static void directionList(StringBuilder list){\r\n        System.out.println(\"These are the rooms to the North, South, East, and West:\");\r\n        System.out.println(list);\r\n    }\r\n\r\n    public static void showRoom(StringBuilder desc){\r\n        System.out.println(desc);\r\n    }\r\n\r\n    public static void navDenial(){\r\n        System.out.println(\"You cannot go in that direction. Try something else....\");\r\n    }\r\n\r\n    public static void quitMessage(){\r\n        System.out.println(\"Thank you for playing!\");\r\n    }\r\n\r\n    public static void startCombatMessage(String monsterName){System.out.println(\"Would you like to begin combat? \" + monsterName);}\r\n\r\n    public static void monsterInspectMessage(String monsterInspect){System.out.println(\"Monster Info: \" + monsterInspect);}\r\n\r\n    public static void inCombatMessage(){\r\n        System.out.println(\"You are currently in combat, what would you like to do?( Attack , Block, Run , Dodge)\");\r\n    }\r\n    public static void monsterInRoomMessage(){\r\n        System.out.println(\"There is currently a monster in this room, defeat it before you can explore!\");\r\n    }\r\n    public static void noMonsterInRoomMessage(){\r\n        System.out.println(\"There are no monsters in this room. Explore as you wish!\");\r\n    }\r\n    public static void invalidCombatOption(){\r\n        System.out.println(\"Invalid combat option!\");\r\n    }\r\n\r\n    public static void playerEscapeCombat(String monster){System.out.println(\"You ran from \" + monster);}\r\n\r\n    public static void printMonsterDesc(String desc){\r\n        System.out.println(desc + \"\\n\");\r\n    }\r\n\r\n    public static void printMonsterDenial(){\r\n        System.out.println(\"Cannot proceed, monster is in this room. You will not be able to leave unless you fight.\\nAttack monster to start combat.\");\r\n    }\r\n\r\n    public static void gameOverMessage(String monsterName){\r\n        System.out.println(\"You were slain by \" + monsterName);\r\n        System.out.println(\"Would you like to start over from most recent checkpoint?\");\r\n    }\r\n    public static void gameRestartedFromCheckpoint(){\r\n        System.out.println(\"Game restarted from checkpoint!\");\r\n    }\r\n    public static void thankYouForPlaying(){\r\n        System.out.println(\"Thank you for playing!!\");\r\n    }\r\n\r\n    public static void printInspectDenial(){\r\n        System.out.println(\"You cannot look around when there's a monster nearby.\\n\");\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/ConsoleView.java b/src/ConsoleView.java
--- a/src/ConsoleView.java	
+++ b/src/ConsoleView.java	
@@ -41,6 +41,10 @@
         System.out.println(desc);
     }
 
+    public static void printCompassInfo(int compass){
+        System.out.println("You've visited " + compass + " rooms out of a total of 31.\n");
+    }
+
     public static void navDenial(){
         System.out.println("You cannot go in that direction. Try something else....");
     }
Index: src/Controller.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.io.Console;\r\nimport java.io.FileNotFoundException;\r\nimport java.util.Scanner;\r\n\r\npublic class Controller {\r\n    public static void main(String[] args) throws FileNotFoundException {\r\n        Scanner userInput = new Scanner(System.in);\r\n        Model.setup();\r\n\r\n        boolean play = true;\r\n        String input;\r\n        ConsoleView.introMessage();\r\n        ConsoleView.showRoom(Model.getRoom());\r\n\r\n        while (play){\r\n            ConsoleView.directionList(Model.getDirectionList());\r\n            ConsoleView.navRequest();\r\n            input = userInput.nextLine();\r\n            input = input.toLowerCase();\r\n            if (input.contains(\"enter room\")){\r\n                String tmp = input.substring(11);\r\n                if (!(Model.checkForMonster())){\r\n                    boolean success = Model.movePlayer(tmp);\r\n                    if (success){\r\n                        ConsoleView.showRoom(Model.getRoom());\r\n                    }\r\n                    else{\r\n                        ConsoleView.navDenial();\r\n                    }\r\n                }\r\n                else {\r\n                    ConsoleView.printMonsterDenial();\r\n                }\r\n            }\r\n            else if(input.contains(\"inspect monster\")){\r\n                ConsoleView.printMonsterDesc(Model.inspectMonster());\r\n            }\r\n            else if (input.contains(\"attack monster\")){\r\n                Model.startCombat();\r\n            }\r\n            //[HOLLY] ->  Pick Up Command\r\n            else if (input.contains(\"pick \")){\r\n                String itemName = input.replaceAll(\"pick \", \"\");\r\n                Model.pickUpItem(itemName);\r\n            }\r\n            //[HOLLY] ->  Drop Command\r\n            else if (input.contains(\"drop \")){\r\n                String itemName = input.replaceAll(\"drop \", \"\");\r\n                Model.dropItem(itemName);\r\n            }\r\n            // [HOLLY] -> Unequip Item Command\r\n            else if(input.contains(\"unequip \")){\r\n                String itemName = input.replaceAll(\"unequip \", \"\");\r\n                Model.unequipItem(itemName);\r\n            }\r\n            // [HOLLY] -> Inspect Room Command (NOT REQUIRED IN SRS) being used for testing purposes\r\n            else if(input.contains(\"inspect room\")){\r\n                if(!(Model.checkForMonster())){\r\n                    ConsoleView.successMessage(Model.currentRoom.inspectRoom());\r\n                }\r\n                else{\r\n                    ConsoleView.printInspectDenial();\r\n                }\r\n            }\r\n            // [HOLLY] -> Inspect Item Command\r\n            else if(input.contains(\"inspect \")){\r\n                String itemName = input.replaceAll(\"inspect \", \"\");\r\n                Model.inspectItem(itemName);\r\n            }\r\n            // [HOLLY] -> Equip Item Command\r\n            else if(input.contains(\"equip \")){\r\n                String itemName = input.replaceAll(\"equip \", \"\");\r\n                Model.equipItem(itemName);\r\n            }\r\n            // [HOLLY] -> Check Inventory Command\r\n            else if(input.contains(\"check inventory\")){\r\n                Model.checkInventory();\r\n            }\r\n            // [HOLLY] opens chest\r\n            else if (input.contains(\"open chest\")){\r\n                if(Model.chestCheck()){\r\n                    Model.assignPuzzle();\r\n                    Model.solvePuzzle();\r\n                }else{\r\n                    ConsoleView.showErrorMessage(\"There is no treasure chest in this room\");\r\n                }\r\n            }\r\n            else if (input.contains(\"exit\")){\r\n                play = false;\r\n            }\r\n\r\n        }\r\n        ConsoleView.quitMessage();\r\n        Model.quitGame();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Controller.java b/src/Controller.java
--- a/src/Controller.java	
+++ b/src/Controller.java	
@@ -85,6 +85,9 @@
                     ConsoleView.showErrorMessage("There is no treasure chest in this room");
                 }
             }
+            else if (input.equalsIgnoreCase("map")){
+                ConsoleView.printCompassInfo(Model.getCompassInfo());
+            }
             else if (input.contains("exit")){
                 play = false;
             }
Index: src/Room.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.LinkedList;\r\n\r\npublic class Room {\r\n    private  double roomNumber;\r\n    private  String roomName;\r\n    private  String desc;\r\n    // [HOLLY] Room Inventory Attribute ->  list of items available in room\r\n    private final LinkedList<Item> roomInventory = new LinkedList<>();\r\n    private double[] directions = new double[4];\r\n\r\n    public Room(double roomNumber, String roomName, String desc) {\r\n        this.roomNumber = roomNumber;\r\n        this.roomName = roomName;\r\n        this.desc = desc;\r\n        //this.puzzleID = puzzleID;\r\n    }\r\n\r\n    public double getRoomNumber() {\r\n        return roomNumber;\r\n    }\r\n\r\n    public String getRoomName() {\r\n        return roomName;\r\n    }\r\n\r\n    public StringBuilder getDesc() {\r\n        return formatDesc();\r\n    }\r\n\r\n    public double[] getDirections() {\r\n        return this.directions;\r\n    }\r\n\r\n    public void setDirections(double[] array) {\r\n        this.directions = array;\r\n    }\r\n\r\n    // [HOLLY] addItem -> Add item to Room's Inventory\r\n    public void addItem(Item item) { this.roomInventory.add(item);}\r\n    // [HOLLY] removeFromRoom -> Remove item from Room's Inventory\r\n    public void removeItem(Item item) {\r\n        this.roomInventory.remove(item);\r\n    }\r\n    // [HOLLY] removeFromRoom -> Remove item from Room's Inventory\r\n    public String inspectRoom() {\r\n        return roomName + \" : \" + this.roomInventory;\r\n    }\r\n\r\n    // [HOLLY] getRoomInventory -> Retrieve Room's Inventory\r\n    public LinkedList<Item> getRoomInventory() {\r\n        return roomInventory;\r\n    }\r\n\r\n    public StringBuilder formatDesc() {\r\n        StringBuilder tmp = new StringBuilder();\r\n        String[] paragraph = this.desc.split(\"\\\\.+\\\\s\");\r\n        for (String s : paragraph) {\r\n            tmp.append(s).append(\"\\n\");\r\n        }\r\n        return tmp;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Room.java b/src/Room.java
--- a/src/Room.java	
+++ b/src/Room.java	
@@ -7,6 +7,7 @@
     // [HOLLY] Room Inventory Attribute ->  list of items available in room
     private final LinkedList<Item> roomInventory = new LinkedList<>();
     private double[] directions = new double[4];
+    private boolean visited = false;
 
     public Room(double roomNumber, String roomName, String desc) {
         this.roomNumber = roomNumber;
@@ -27,6 +28,13 @@
         return formatDesc();
     }
 
+    public void setVisitedStatus (){
+        if (!visited){
+            this.visited = true;
+            Model.compass += 1;
+        }
+    }
+
     public double[] getDirections() {
         return this.directions;
     }
